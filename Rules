#!/usr/bin/env ruby

require 'compass'
require './environment'

Compass.add_project_configuration 'compass/config.rb'

preprocess do

  # Creates in-memory tag pages from partial: layouts/tag.html
  def generate_tag_pages
    tag_set(publishing_articles).each do |tag|
      @items.create(
        "<%= render('/tag.*',  { :tag => '#{tag}', :semantic_tag => SEMANTIC_TAGS['#{tag}'] }) %>",
        { :title => "Tag: #{tag}", :is_hidden => true, :description => "All posts having to do with the tag '#{tag}'" },
        "/tags/#{tag.to_slug}/index.html",
        :binary => false
      )
    end
  end

  # Creates in-memory author pages from partial: layouts/author.html
  def generate_author_pages
    authors(publishing_articles).each do |author|
      @items.create(
        "<%= render('/author.*', :author => '#{author}') %>",
        { :title => "Articles by #{author}", :is_hidden => true },
        "/authors/#{author.to_slug}/index.html",
        :binary => false
      )
    end
  end

  # Creates in-memory blog archive pages from partial:
  # layouts/blog_archive.html
  def generate_blog_archives
    years = publishing_articles.map { |a| a[:created_at].year }.uniq
    years.each do |year|
      @items.create(
        "<%= render('/blog_archive.*', :year => #{year}) %>",
        { :title => "Articles from #{year}", :is_hidden => true },
        "/blog/#{year}/index.html",
        :binary => false
      )
    end
  end

  def mark_unpublished_articles_as_hidden
    articles.each do |article|
      if not article[:published] || $include_drafts
        article[:is_hidden] = true
      end
    end
  end

  def mark_javascripts_as_hidden
    items.each do |item|
      if item.identifier.ext == 'js' then
        item[:is_hidden] = true
      end
    end
  end

  def mark_stylesheets_as_hidden
    items.each do |item|
      if item.identifier.ext =~ /css/ then
        item[:is_hidden] = true
      end
    end
  end

  # Includes any custom json-ld contexts for RDF turtle data.
  #
  # Looks for a file called `context.json` in the same directory as the turtle
  # source file, and adds it to the item's metadata under the key `context`.
  def add_custom_jsonld_contexts
    items.each do |item|
      if item.identifier.ext == 'ttl' then
        context_path = item[:filename].rpartition("/")[0] + "/context.json"
        context_doc = JSON.parse(File.read context_path) if File.exists? context_path
        unless context_doc.nil? then
          item[:context] = context_doc["@context"] unless context_doc["@context"].nil?
          unless item[:context].nil? then
            base_context = [item[:context]].find { |k,v| k.include?("@base") }
            item[:base_uri] = base_context["@base"] unless base_context.nil?
          end
        end
      end
    end
  end

  # We don't want anything nanoc specific in the spec folder, so have to use
  # some trickery to get the information we need for searches.
  def extract_metadata_from_specification_documents
    require 'nokogiri'

    @items.select { |i| i.identifier.to_s.start_with?("/spec/") }.each do |item|
      case item.identifier.ext
      when 'html'
        doc = Nokogiri::HTML(File.open(item[:filename]))
        item[:title] = doc.at_css("title").inner_text
      else
        item[:is_hidden_from_human_search] = true
      end
    end
  end

  mark_unpublished_articles_as_hidden
  mark_javascripts_as_hidden
  mark_stylesheets_as_hidden
  generate_tag_pages
  generate_author_pages
  generate_blog_archives
  add_custom_jsonld_contexts
  extract_metadata_from_specification_documents
end

ignore '/css/partials/_*'
ignore '/css/modules/_*'

### Compilation Rules ###################################################

compile '/css/*.scss' do
  filter :sass, Compass.sass_engine_options

  if $use_minified_css then
    filter :rainpress
  end
end

compile '/spec/**/*.ttl', :rep => :jsonld do
  filter :rdf_distiller, :in => :ttl, :out => :jsonld
end

compile '/spec/**/*.ttl', :rep => :rdfxml do
  filter :rdf_distiller, :in => :ttl, :out => :rdfxml
end

compile '/spec/**/*.html' do
  if $use_minified_html then
    filter :html5small
  end
end

compile '/js/search-data.js' do
  filter :erb
  if $use_minified_js then
    filter :uglify_js
  end
end

compile '/js/**/*.js' do
  if $use_minified_js then
    filter :uglify_js
  end
end

compile '/blog/feed_private.xml' do
  filter :erb
end

compile '/sitemap.xml' do
  filter :erb
end

compile '/company/index.*', :rep => :vcard do
  filter :vcard, @config[:vcard]
end

compile '/company/index.*', :rep => :qrcode do
  filter :vcard, @config[:vcard]
  filter :qrcode, :size => 25, :module_size => 2, :color => "#544233"
end

compile '/**/*.html' do
  filter :erb

  if $spellcheck then
    filter :spellchecker
  end

  layout '/default.*'

  filter :rubypantsunicode

  if $use_minified_html then
    filter :html5small
  end
end

compile '/**/*.{markdown,md}' do
  filter :erb
  filter :kramdown, @config[:kramdown]

  if item[:kind] == 'article' && ($include_drafts or item[:published]) then
    filter :absolutify_local_paths
    layout '/article.*'
  end

  if $spellcheck then
    filter :spellchecker
  end

  layout '/default.*'

  filter :rubypantsunicode

  if $use_minified_html then
    filter :html5small
  end
end

compile '/**/*' do
end

### Routing Rules ###################################################

route '/css/*.scss' do
  item.identifier.without_ext + '.css'
end

route '/404.*' do
  '/404.html'
end

route '/spec/README.*' do
  nil
end

route '/spec/LICENSE' do
  nil
end

route '/spec/**/*.ttl', :rep => :jsonld do
  item.identifier.without_ext + '.jsonld'
end

route '/spec/**/*.ttl', :rep => :rdfxml do
  item.identifier.without_ext + '.rdf'
end

route '/blog/feed_private.xml' do
  item.identifier.without_ext + '/index.atom'
end

route '/company/index.*', :rep => :vcard do
  '/company/pentandra.vcf'
end

route '/company/index.*', :rep => :qrcode do
  '/images/pentandra-qrcode.png'
end

route '/**/index.{html,markdown,md}' do
  if item[:kind] == 'article'
    if $include_drafts or item[:published] then
      item.identifier.without_ext + '.html'
    end
  else
    item.identifier.without_ext + '.html'
  end
end

route '/**/*.{html,markdown,md}' do
  if item[:kind] == 'article'
    if $include_drafts or item[:published] then
      item.identifier.without_ext + '/index.html'
    end
  else
    item.identifier.without_ext + '/index.html'
  end
end

route '/**/*' do
  item.identifier.to_s
end

layout '/**/*', :erb
