#!/usr/bin/env ruby

require 'date'

preprocess do
  @config[:production] = !ENV['NANOC_ENV'].nil? && ENV['NANOC_ENV'] == 'production' # See https://github.com/nanoc/nanoc/issues/487

  def mark_unpublished_articles_as_hidden
    articles().each do |article|
      if not article[:published] || $include_drafts
        article[:is_hidden] = true
      end
    end
  end

  def mark_javascripts_as_hidden
    @items.each do |item|
      if item.identifier.exts.include?('js') then
        item[:is_hidden] = true
      end
    end
  end

  def mark_stylesheets_as_hidden
    @items.each do |item|
      if item.identifier.ext =~ /css/ then
        item[:is_hidden] = true
      end
    end
  end

  def include_partials_when_has_media
    @items.select { |item| item.key?(:has_media) }.each do |item|
      item[:head] ||= []
      item[:endbody] ||= []

      item[:head] << 'video-styles'
      item[:endbody] << 'video-scripts'
    end
  end

  # Includes any custom json-ld contexts for RDF turtle data.
  #
  # Looks for a file called `context.json` in the same directory as the turtle
  # source file, and adds it to the item's metadata under the key `context`.
  def add_custom_jsonld_contexts
    @items.each do |item|
      if item.identifier.ext == 'ttl' then
        context_path = item[:filename].rpartition("/")[0] + "/context.json"
        context_doc = JSON.parse(File.read context_path) if File.exists? context_path
        unless context_doc.nil? then
          item[:context] = context_doc["@context"] unless context_doc["@context"].nil?
          unless item[:context].nil? then
            base_context = [item[:context]].find { |k,v| k.include?("@base") }
            item[:base_uri] = base_context["@base"] unless base_context.nil?
          end
        end
      end
    end
  end

  # We don't want anything nanoc specific in the spec folder, so have to use
  # some trickery to get the information we need for searches.
  def extract_metadata_from_specification_documents
    require 'nokogiri'

    @items.select { |i| i.identifier.to_s.start_with?("/spec/") }.each do |item|
      case item.identifier.ext
      when 'html'
        doc = Nokogiri::HTML(File.open(item[:filename]))
        item[:title] = doc.at_css("title").inner_text
      else
        item[:is_hidden_from_human_search] = true
      end
    end
  end

  mark_unpublished_articles_as_hidden
  mark_javascripts_as_hidden
  mark_stylesheets_as_hidden

  generate_tag_pages(publishing_articles())
  generate_author_pages(publishing_articles())
  generate_blog_archives(publishing_articles())

  include_partials_when_has_media

  add_custom_jsonld_contexts
  extract_metadata_from_specification_documents

end

# Aggregated JavaScript scripts
 
compile '/assets/scripts/*.js.erb' do
  filter :erb
  filter :uglify_js if @config[:production]
  write '/js/' + File.basename(@item.identifier.without_ext)
end

# Other JavaScript scripts
 
compile '/assets/scripts/*.js' do
  filter :uglify_js if @config[:production]
  write '/js/' + File.basename(@item.identifier.to_s)
end

# Stylesheets

ignore '/assets/stylesheets/**/_*'

compile '/assets/stylesheets/**/*.htc' do
  write '/css/' + File.basename(@item.identifier.to_s)
end

compile '/assets/stylesheets/**/*' do
  filter :sass, Compass.sass_engine_options
  write '/css/' + File.basename(@item.identifier.without_ext + '.css')
end

# Favicon and images

route '/assets/images/*' do
  '/images/' + File.basename(@item.identifier.to_s)
end

# Fonts and other files

route '/assets/fonts/**/*' do
  '/fonts/' + File.basename(@item.identifier.to_s)
end

route '/assets/files/**/*' do
  '/downloads/' + File.basename(@item.identifier.to_s)
end

ignore '/assets/components/mediaelement/build/DO NOT CHANGE THESE FILES. USE -src- FOLDER.txt'
route '/assets/components/mediaelement/build/*' do
  '/js/mediaelement/' + File.basename(@item.identifier.to_s)
end

ignore '/assets/components/**/*'

# Sitemap

compile '/sitemap.erb' do
  filter :erb
  write '/sitemap.xml'
end

# Specification documents (N3)

compile '/spec/**/*.ttl', :rep => :jsonld do
  filter :rdf_distiller, :in => :ttl, :out => :jsonld
  write item.identifier.without_ext + '.jsonld'
end

compile '/spec/**/*.ttl', :rep => :rdfxml do
  filter :rdf_distiller, :in => :ttl, :out => :rdfxml
  write item.identifier.without_ext + '.rdf'
end

# vcard and QR code

compile '/company/index.*', :rep => :vcard do
  filter :vcard, @config[:vcard]
  write '/company/pentandra.vcf'
end

compile '/company/index.*', :rep => :qrcode do
  filter :vcard, @config[:vcard]
  filter :qrcode, @config[:qrcode]
  write '/images/pentandra-qrcode.png'
end

# Blog index

compile '/blog/index.erb' do
  filter :erb
  layout '/blog/default.*'
  filter :rubypantsunicode
  filter :html5small if @config[:production]
  write item.identifier.without_ext + '.html'
end

# Blog feed

compile '/blog/feed_private.erb' do
  filter :erb
  write item.identifier.without_ext + '/index.atom'
end

# Blog tags, authors, and archives

compile '/{tags,authors,archives}/**/*' do
  filter :erb
  filter :rubypantsunicode
  filter :html5small if @config[:production]
  write item.identifier.without_ext + '.html'
end

# Blog posts

compile '/blog/**/*.{md,mmd}' do
  filter :erb
  if 'mmd' == @item[:extension]
  else # assume Markdown
    filter :kramdown, @config[:kramdown]
  end
  filter :colorize_syntax, 
         :default_colorizer => :pygmentize,
         :pygmentize => { :nowrap => 'True' }
  filter :absolutify_local_paths
  filter :spellchecker if not @config[:production]
  layout '/blog/article.*'
  filter :rubypantsunicode
  filter :html5small if @config[:production]
  write item.identifier.without_ext + '.html'
end

# Passthrough

passthrough '/humans.txt'
passthrough '/robots.txt'
passthrough '/spec/README.*'
passthrough '/spec/LICENSE'

# HTML, ERB, and Markdown files

compile '/**/*.erb' do
  filter :erb
  filter :spellchecker if not @config[:production]
  layout '/default.*'
  filter :rubypantsunicode
  filter :html5small if @config[:production]
end

compile '/**/*.html' do
  filter :spellchecker if not @config[:production]
  layout '/default.*'
  filter :rubypantsunicode
  filter :html5small if @config[:production]
end

compile '/**/*' do
end

route '/404.html' do
  item.identifier.to_s
end

route '/**/index.{erb,html,md,mmd}' do
  item.identifier.without_ext + '.html'
end

route '/**/*.{erb,html,md,mmd}' do
  item.identifier.without_ext + '/index.html'
end

route '/**/*' do
  item.identifier.to_s
end

layout '/**/*', :erb
