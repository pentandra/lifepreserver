#!/usr/bin/env ruby

require 'compass'
require './environment'

Compass.add_project_configuration 'compass/config.rb'

# A few helpful tips about the Rules file:
#
# * The string given to #compile and #route are matching patterns for
#   identifiers--not for paths. Therefore, you can’t match on extension.
#
# * The order of rules is important: for each item, only the first matching
#   rule is applied.
#
# * Item identifiers start and end with a slash (e.g. “/about/” for the file
#   “content/about.html”). To select all children, grandchildren, … of an
#   item, use the pattern “/about/*/”; “/about/*” will also select the parent,
#   because “*” matches zero or more characters.

preprocess do

  # Creates in-memory tag pages from partial: layouts/tag.html
  def generate_tag_pages
    tag_set(publishing_articles).each do |tag|
      items << Nanoc::Item.new(
        "<%= render('tag',  :tag => '#{tag}') %>",
        { :title => "Tag: #{tag}", :is_hidden => true },
        "/tags/#{tag.to_slug}/",
        :binary => false
      )
    end
  end

  # Creates in-memory author pages from partial: layouts/author.html
  def generate_author_pages
    authors(publishing_articles).each do |author|
      items << Nanoc::Item.new(
        "<%= render('author', :author => '#{author}') %>",
        { :title => "Articles by #{author}", :is_hidden => true },
        "/authors/#{author.to_slug}/",
        :binary => false
      )
    end
  end

  # Creates in-memory blog archive pages from partial:
  # layouts/blog_archive.html
  def generate_blog_archives
    years = publishing_articles.map { |a| a[:created_at].year }.uniq
    years.each do |year|
      items << Nanoc::Item.new(
        "<%= render('blog_archive', :year => #{year}) %>",
        { :title => "Articles from #{year}", :is_hidden => true },
        "/blog/#{year}/",
        :binary => false
      )
    end
  end

  def mark_unpublished_articles_as_hidden
    articles.each do |article|
      if not article[:published] || $include_drafts
        article[:is_hidden] = true
      end
    end
  end

  mark_unpublished_articles_as_hidden
  generate_tag_pages
  generate_author_pages
  generate_blog_archives
end

### Compilation Rules ###################################################

compile '/css/partials/_*/' do
  # don't compile partials
end

compile '/css/modules/_*/' do
  # don't compile modules
end

compile '/css/*/' do
  filter :sass, Compass.sass_engine_options

  if $use_minified_css then
    filter :rainpress
  end
end

compile '/static/*/' do
  # don't compile
end

compile '/js/search-data/' do
  filter :erb
  if $use_minified_js then
    filter :uglify_js
  end
end

compile '/js/*/' do
  if $use_minified_js then
    filter :uglify_js
  end
end

compile '/blog/feed_private/' do
  filter :erb
end

compile '/sitemap/' do
  filter :erb
end

compile '/company/', :rep => :vcard do
  filter :vcard, {
    :name => "Pentandra",
    :org => "Pentandra Research Solutions, Inc.",
    :phone => @item[:phone],
    :email => @item[:email],
    :url => @config[:base_url]}
end

compile '/company/', :rep => :qrcode do
  filter :vcard, {
    :name => "Pentandra",
    :org => "Pentandra Research Solutions, Inc.",
    :phone => @item[:phone],
    :email => @item[:email],
    :url => @config[:base_url]}
  filter :qrcode, :size => 17, :module_size => 2, :color => "#544233"
end

compile '*' do
  if item.binary?
    # don’t filter binary items
  else
    filter :erb

    if item[:extension] == 'markdown'
      filter :kramdown, :auto_ids => false
    end

    if item[:kind] == 'article' && ($include_drafts or item[:published]) then
      filter :absolutize_paths, :type => :html
      layout 'article'
    end

    if $spellcheck then
      filter :spellchecker
    end

#    filter :add_links_to_headers

    layout 'default'

    if $use_minified_html then
      filter :html5small
    end
  end
end

### Routing Rules ###################################################

route '/static/*' do
  # /static/foo.html/ -> /foo.html
  item.identifier[7..-2]
end

route '/css/partials/_*/' do
  nil
end

route '/css/modules/_*/' do
  nil
end

route '/css/*/' do
  # don't generate a directory like we do for HTML files
  item.identifier.chop + '.css'
end

route '/js/*/' do
  # don't generate a directory like we do for HTML files
  item.identifier.chop + '.js'
end

route '/404/' do
  '/404.html'
end

route '/blog/feed_private/' do
  item.identifier + 'index.xml'
end

route '/sitemap/' do
  item.identifier.chop + '.xml'
end

route '/company/', :rep => :vcard do
  item.identifier.chop + '.vcf'
end

route '/company/', :rep => :qrcode do
  '/images/pentandra-qrcode.png'
end

route '*' do
  if item.binary?
    # Write item with identifier /foo/ to /foo.ext
    item.identifier.chop + '.' + item[:extension]
  elsif item[:kind] == 'article'
    if $include_drafts or item[:published] then
      item.identifier + 'index.html'
    end
  else
    # Write item with identifier /foo/ to /foo/index.html
    item.identifier + 'index.html'
  end
end

layout '*', :erb
