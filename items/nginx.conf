# Configuration File - Nginx Server Configs
# http://nginx.org/en/docs/dirindex.html

# Sets the worker threads to the number of CPU cores available in the system
# for best performance.
# Should be > the number of CPU cores.
# Maximum number of connections = worker_processes * worker_connections
worker_processes auto;

<% if @config[:production] %>

# Run as a unique, less privileged user for security reasons.
user nginx;

# Maximum file descriptors that can be opened per process
# This should be > worker_connections
worker_rlimit_nofile 8192;

events {
  # If you need more connections than this, you start optimizing your OS.
  # That's probably the point at which you hire people who are smarter than you
  # as this is *a lot* of requests. Should be < worker_rlimit_nofile.
  worker_connections 8000;
}
<% else %>
events {
  worker_connections 1024;
}
<% end %>

error_log <%= @config[:server][:error_log] %>;

# The file storing the process ID of the main process
pid <%= @config[:server][:pid_file] %>;

http {

  # Hide nginx version information.
  include security/server_software_information.conf;

  # Specify MIME types for files.
  include mime.types;
  default_type application/octet-stream;

  #Specify a default charset
  charset utf-8;

  # Update charset_types to match updated mime.types.
  # `text/html` is always included by charset module.
  charset_types
    text/css
    text/plain
    text/vnd.wap.wml
    text/javascript
    text/markdown
    text/calendar
    text/x-component
    text/vcard
    text/cache-manifest
    text/vtt
    text/srt
    text/turtle
    text/n3
    application/json
    application/manifest+json
    application/atom+xml
    application/rss+xml
    application/rdf+xml
    application/ld+json;

  # Include $http_x_forwarded_for within default format used in log files
  log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

  # Log access to this file
  # This is only used when you don't override it on a `server` level
  access_log logs/access.log main;

  # How long to allow each connection to stay idle.
  # Longer values are better for each individual client, particularly for SSL,
  # but means that worker connections are tied up longer.
  keepalive_timeout 20s;

  # Speed up file transfers by using sendfile() to copy directly
  # between descriptors rather than using read()/write().
  # For performance reasons, on FreeBSD systems w/ ZFS
  # this option should be disabled as ZFS's ARC caches
  # frequently used files in RAM by default.
  sendfile on;

  # Don't send out partial frames; this increases throughput
  # since TCP frames are filled up before being sent out.
  tcp_nopush on;

  # Enable gzip compression
  include performance/compression.conf;

  # Specify file cache expiration
  include performance/cache_expiration.conf;

  # Specify suffix mappings for negotiation of linked data content.
  # Borrowed from https://harshp.com/dev/semantic_web/rdfowl-content-negotiation-using-nginx
  # location/redirections.conf
  map $http_accept $ld_accept_suffix {
    # Send RDF/XML by default for clients that do not send appropriate Accept
    # header values. See https://www.w3.org/TR/swbp-vocab-pub/#default
    default                    ".rdf";

    # Linked data media types
    ~*application/ld\+json     ".jsonld";
    ~*text/turtle              ".ttl";
    ~*text/html                ".html";
    ~*application/rdf\+xml     ".rdf";
    ~*application/xhtml\+xml   ".html";
  }

  # MSIE does not cache outbound headers, so these two mappings are used to avoid
  # sending Vary headers on certain resources. For more information, see:
  # http://blogs.msdn.com/b/ieinternals/archive/2009/06/17/vary-header-prevents-caching-in-ie.aspx
  map $msie $cache_control {
    "1" "private";
  }

  map $msie $vary_header {
    default "Accept";
    "1"     "";
  }

  # Add X-XSS-Protection for HTML documents.
  # security/x-xss-protection.conf
  map $sent_http_content_type $x_xss_protection {
    #           (1)    (2)
    ~*text/html "1; mode=block";
  }

  # Add X-Frame-Options for HTML documents.
  # security/x-frame-options.conf
  map $sent_http_content_type $x_frame_options {
    ~*text/html DENY;
  }

  # Add Content-Security-Policy for HTML documents.
  # security/content-security-policy.conf
  map $sent_http_content_type $content_security_policy {
    ~*text/html "default-src 'self'; base-uri 'none'; form-action 'self'; frame-ancestors 'none'; upgrade-insecure-requests";
  }

  # Add Referrer-Policy for HTML documents.
  # security/referrer-policy.conf.conf
  map $sent_http_content_type $referrer_policy {
    ~*text/html "no-referrer-when-downgrade";
  }

  # Add X-UA-Compatible for HTML documents.
  # internet_explorer/x-ua-compatible.conf
  map $sent_http_content_type $x_ua_compatible {
    ~*text/html "IE=edge";
  }

  # Add Access-Control-Allow-Origin.
  # h5bp/cross-origin/requests.conf
  map $sent_http_content_type $cors {
    # Images
    ~*image/ "*";

    # Web fonts
    ~*font/                         "*";
    ~*application/vnd.ms-fontobject "*";
    ~*application/x-font-ttf        "*";
    ~*application/font-woff         "*";
    ~*application/x-font-woff       "*";
    ~*application/font-woff2        "*";
  }

  # Enable lua code cache for production
  lua_code_cache <%= @config[:production] ? 'on' : 'off' %>;

  # Drop requests for unknown hosts
  #
  # If no default server is defined, nginx will use the first found server.
  # To prevent host header attacks, or other potential problems when an unknown
  # servername is used in a request, it's recommended to drop the request
  # returning 444 "no response".

  server {
    listen [::]:<%= @config[:server][:port] %> default_server deferred;
    listen <%= @config[:server][:port] %> default_server deferred;

    server_name _;

    # Redirect first ANY request to a secure connection, even if the host is
    # unknown.
    return 301 https://$host$request_uri;
  }

  server {
    listen [::]:<%= @config[:server][:port_tls] %> ssl http2 default_server;
    listen <%= @config[:server][:port_tls] %> ssl http2 default_server;

    server_name _;

    include ssl/ssl_engine.conf;
    include ssl/certificate_files.conf;
    include ssl/policy_deprecated.conf;

    return 444;
  }

  <% if @config[:production] %>

  # Choose between www and non-www, listen on the *wrong* one and redirect to
  # the right one -- http://wiki.nginx.org/Pitfalls#Server_Name
  server {
    listen [::]:<%= @config[:server][:port] %>;
    listen <%= @config[:server][:port] %>;

    # listen on both hosts
    server_name <%= @config[:server][:name] %> www.<%= @config[:server][:name] %>;

    # and redirect to the https host (declared below)
    # avoiding http://www -> https://www -> https:// chain.
    return 301 https://<%= @config[:server][:name] %>$request_uri;
  }

  # listen on the wrong host with TLS as well and redirect to the right one
  server {
    listen [::]:<%= @config[:server][:port_tls] %> ssl http2;
    listen <%= @config[:server][:port_tls] %> ssl http2;

    server_name www.<%= @config[:server][:name] %>;

    include ssl/ssl_engine.conf;
    include ssl/certificate_files.conf;
    include ssl/policy_deprecated.conf;
    include ssl/ocsp_stapling.conf;

    # and redirect to the non-www host (declared below)
    return 301 https://<%= @config[:server][:name] %>$request_uri;
  }

  <% else %>

  # Include an unencrypted server for development
  server {
    listen [::]:<%= @config[:server][:port] %>;
    listen <%= @config[:server][:port] %>;

    server_name <%= @config[:server][:name] %>;

    # Include custom error pages
    include errors/custom_errors.conf;

    # Include the basic config set
    include internet_explorer/x-ua-compatible.conf;
    include security/content-security-policy.conf;
    include security/referrer-policy.conf;
    include security/x-content-type-options.conf;
    include security/x-frame-options.conf;
    include security/x-xss-protection.conf;
    include location/security_file_access.conf;
    include location/server-status.conf;
    include location/redirections.conf;

    root <%= @config.fetch(:static_root).sub(/^\/+/, '') %>;
  }

  <% end %>

  server {

    <% platform = @config[:server][:platform] || RUBY_PLATFORM %>
    <% if platform['freebsd'] %>
    listen [::]:<%= @config[:server][:port_tls] %> ssl http2 accept_filter=dataready;
    listen <%= @config[:server][:port_tls] %> ssl http2 accept_filter=dataready;
    <% elsif platform['linux'] %>
    listen [::]:<%= @config[:server][:port_tls] %> ssl http2 deferred;
    listen <%= @config[:server][:port_tls] %> ssl http2 deferred;
    <% else %>
    listen [::]:<%= @config[:server][:port_tls] %> ssl http2;
    listen <%= @config[:server][:port_tls] %> ssl http2;
    <% end %>

    # The host name to respond to
    server_name <%= @config[:server][:name] %>;

    include ssl/ssl_engine.conf;
    include ssl/certificate_files.conf;
    include ssl/policy_deprecated.conf;
    <% if @config[:production] %>
    include security/strict-transport-security.conf;
    include ssl/ocsp_stapling.conf;
    <% end %>

    # Include custom error pages
    include errors/custom_errors.conf;

    # Include the basic config set
    include internet_explorer/x-ua-compatible.conf;
    include security/content-security-policy.conf;
    include security/referrer-policy.conf;
    include security/x-content-type-options.conf;
    include security/x-frame-options.conf;
    include security/x-xss-protection.conf;
    include location/security_file_access.conf;
    include location/server-status.conf;
    include location/redirections.conf;

    root <%= @config.fetch(:static_root).sub(/^\/+/, '') %>;
  }
}
