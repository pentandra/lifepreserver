# Configuration File - Nginx Server Configs
# http://nginx.org/en/docs/dirindex.html

<% if @config[:production] %>
# Run as a unique, less privileged user for security reasons.
user nginx;

# Sets the worker threads to the number of CPU cores available in the system
# for best performance.
# Should be > the number of CPU cores.
# Maximum number of connections = worker_processes * worker_connections
worker_processes auto;

# Maximum file descriptors that can be opened per process
# This should be > worker_connections
worker_rlimit_nofile 8192;

events {
  # If you need more connections than this, you start optimizing your OS.
  # That's probably the point at which you hire people who are smarter than you
  # as this is *a lot* of requests. Should be < worker_rlimit_nofile.
  worker_connections 8000; 
}
<% else %>
events {
  worker_connections 1024;
}
<% end %>

error_log <%= @config[:server][:error_log] %>;

# The file storing the process ID of the main process
pid <%= @config[:server][:pid_file] %>;

http {

  # Hide nginx version information.
  server_tokens off;

  # Specify MIME types for files.
  include mime.types;
  default_type application/octet-stream;

  #Specify a default charset
  charset utf-8;

  # Update charset_types to match updated mime.types.
  # text/html is always included by charset module.
  charset_types 
    text/xml
    text/css
    text/plain
    text/vnd.wap.wml
    text/vcard
    text/turtle
    text/n3
    application/javascript
    application/json
    application/atom+xml
    application/rss+xml
    application/rdf+xml
    application/ld+json;

  # Include $http_x_forwarded_for within default format used in log files
  log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

  # Log access to this file
  # This is only used when you don't override it on a server{} level
  access_log logs/access.log main;

  # How long to allow each connection to stay idle.
  # Longer values are better for each individual client, particularly for SSL,
  # but means that worker connections are tied up longer.
  keepalive_timeout 20s;
  
  # Speed up file transfers by using sendfile() to copy directly
  # between descriptors rather than using read()/write().
  # For performance reasons, on FreeBSD systems w/ ZFS
  # this option should be disabled as ZFS's ARC caches
  # frequently used files in RAM by default.
  sendfile on;

  # Don't send out partial frames; this increases throughput
  # since TCP frames are filled up before being sent out.
  tcp_nopush on;

  # Enable gzip compression.
  gzip on;
  
  # Compression level (1-9).
  # 5 is a perfect compromise between size and CPU usage, offering about
  # 75% reduction for most ASCII files (almost identical to level 9).
  gzip_comp_level 5;
  
  # Don't compress anything that's already small and unlikely to shrink much
  # if at all (the default is 20 bytes, which is bad as that usually leads to
  # larger files after gzipping).
  gzip_min_length 256;

  # Compress data even for clients that are connecting to us via proxies,
  # identified by the "Via" header (required for CloudFront).
  gzip_proxied any;

  # Tell proxies to cache both the gzipped and regular version of a resource
  # whenever the client's Accept-Encoding capabilities header varies;
  # Avoids the issue where a non-gzip capable client (which is extremely rare
  # today) would display gibberish if their proxy gave them the gzipped version.
  gzip_vary on;

  # Compress all output labeled with one of the following MIME-types.
  gzip_types
    application/atom+xml
    application/javascript
    application/json
    application/ld+json
    application/manifest+json
    application/rss+xml
    application/vnd.geo+json
    application/vnd.ms-fontobject
    application/x-font-ttf
    application/x-web-app-manifest+json
    application/xhtml+xml
    application/xml
    font/opentype
    image/bmp
    image/svg+xml
    image/x-icon
    text/cache-manifest
    text/css
    text/plain
    text/vcard
    text/vnd.rim.location.xloc
    text/vtt
    text/x-component
    text/x-cross-domain-policy;
    # text/html is always compressed by gzip module

  # This should be turned on if you are going to have pre-compressed copies (.gz) of
  # static files available. If not it should be left off as it will cause extra I/O
  # for the check. It would be better to enable this in a location {} block for
  # a specific directory, or on an individual server{} level.
  # gzip_static on;

  gzip_disable        "msie6";

  # Drop requests for unknown hosts
  #
  # If no default server is defined, nginx will use the first found server.
  # To prevent host header attacks, or other potential problems when an unknown 
  # servername is used in a request, it's recommended to drop the request 
  # returning 444 "no response".

  server {
    listen <%= @config[:server][:port] %> default_server;
    return 444;
  }

  <% if @config[:production] %>

  # Choose between www and non-www, listen on the *wrong* one and redirect to
  # the right one -- http://wiki.nginx.org/Pitfalls#Server_Name
  #
  server {
    listen [::]:<%= @config[:server][:port] %>;
    listen <%= @config[:server][:port] %>;

    # listen on both hosts
    server_name <%= @config[:server][:name] %> www.<%= @config[:server][:name] %>;

    # and redirect to the https host (declared below)
    # avoiding http://www -> https://www -> https:// chain.
    return 301 https://<%= @config[:server][:name] %>$request_uri;
  }

  # listen on the wrong host with TLS as well and redirect to the right one
  server {
    listen [::]:<%= @config[:server][:port_tls] %> ssl http2;
    listen <%= @config[:server][:port_tls] %> ssl http2;

    server_name www.<%= @config[:server][:name] %>;

    include directives/ssl.conf;

    # and redirect to the non-www host (declared below)
    return 301 https://<%= @config[:server][:name] %>$request_uri;
  }

  <% else %>

  # Include an unencrypted server for development
  server {
    listen [::]:<%= @config[:server][:port] %>;
    listen <%= @config[:server][:port] %>;

    server_name <%= @config[:server][:name] %>;

    include directives/extra-security.conf;

    # Custom 404 page
    error_page 404 /404.html;

    # Include the basic config set
    include directives/x-ua-compatible.conf;
    include routes/expires.conf;
    include routes/protect-system-files.conf;
    include routes/server-status.conf;

    lua_code_cache off;

    root <%= @config.fetch(:static_root).sub(/^\/+/, '') %>;

    include routes/redirections.conf;
  }

  <% end %>

  server {

    <% platform = @config[:server][:platform] || RUBY_PLATFORM %>
    <% if platform['freebsd'] %>
    listen [::]:<%= @config[:server][:port_tls] %> ssl http2 accept_filter=dataready;
    listen <%= @config[:server][:port_tls] %> ssl http2 accept_filter=dataready;
    <% elsif platform['linux'] %>
    listen [::]:<%= @config[:server][:port_tls] %> ssl http2 deferred;
    listen <%= @config[:server][:port_tls] %> ssl http2 deferred;
    <% else %>
    listen [::]:<%= @config[:server][:port_tls] %> ssl http2;
    listen <%= @config[:server][:port_tls] %> ssl http2;
    <% end %>

    # The host name to respond to
    server_name <%= @config[:server][:name] %>;

    include directives/ssl.conf;

    <% if @config[:production] %>
    include directives/ssl-stapling.conf;
    <% end %>

    include directives/extra-security.conf;

    # Custom 404 page
    error_page 404 /404.html;

    # Include the basic config set
    include directives/x-ua-compatible.conf;
    include routes/expires.conf;
    include routes/protect-system-files.conf;
    include routes/server-status.conf;

    lua_code_cache <%= @config[:production] ? 'on' : 'off' %>;

    root <%= @config.fetch(:static_root).sub(/^\/+/, '') %>;

    include routes/redirections.conf;
  }
}
